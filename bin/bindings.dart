// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Int32> _int8 = _lookup<ffi.Int32>('int8');

  int get int8 => _int8.value;

  set int8(int value) => _int8.value = value;

  void hello_world() {
    return _hello_world();
  }

  late final _hello_worldPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('hello_world');
  late final _hello_world = _hello_worldPtr.asFunction<void Function()>();

  void cPrint(
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _cPrint(
      str,
    );
  }

  late final _cPrintPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'cPrint');
  late final _cPrint =
      _cPrintPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  int multi_sum(
    double nr_count,
  ) {
    return _multi_sum(
      nr_count,
    );
  }

  late final _multi_sumPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('multi_sum');
  late final _multi_sum = _multi_sumPtr.asFunction<int Function(double)>();

  void calc(
    int src,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>
        callback,
  ) {
    return _calc(
      src,
      callback,
    );
  }

  late final _calcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int32, ffi.Int32)>>)>>('calc');
  late final _calc = _calcPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>)>();
}
